{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/auth-service.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-toastr\";\nclass RegisterComponent {\n  constructor(fb, authService, router, toastr) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmedPassword: ['', Validators.required]\n    });\n  }\n  submitForm() {\n    // Log form values\n    console.log(this.registerForm.value);\n    // Log form errors\n    console.log(this.registerForm.errors);\n    if (this.registerForm && this.registerForm.invalid) {\n      console.log('This form is invalid');\n      //this.registerForm.reset();\n      return;\n    }\n    const payload = {\n      username: this.registerForm.controls['username'].value,\n      password: this.registerForm.controls['password'].value,\n      confirmedPassword: this.registerForm.controls['confirmedPassword'].value\n    };\n    console.log(\"Username Entered: \", payload.username);\n    console.log(\"Password Entered: \", payload.password);\n    console.log(\"Confirmed Password Entered: \", payload.confirmedPassword);\n    // //service sends payload to backend \n    this.authService.register(payload).subscribe({\n      next: value => {\n        this.router.navigate(['/login']);\n      },\n      error: error => {\n        console.log(error.error.message);\n        let errMsg = error.error?.message || 'Unknown error occurred';\n        this.toastr.error(errMsg, 'Error');\n        this.toastr.error(error.error.message, 'Error');\n      }\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthServiceService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ToastrService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 17,\n  vars: 1,\n  consts: [[1, \"flex\", \"flex-col\", \"items-center\"], [1, \"flex\", \"flex-col\", \"items-center\", \"gap-10\", \"my-40\", \"shadow-xl\", \"p-20\", \"rounded-md\", \"bg-gradient-to-tr\", \"from-yellow-900\", \"to-yellow-200\", \"text-white\", 3, \"formGroup\", \"ngSubmit\"], [1, \"font-bold\", \"text-4xl\"], [1, \"flex\", \"flex-col\"], [\"type\", \"username\", \"placeholder\", \"text\", \"formControlName\", \"username\", 1, \"bg-orange-100\", \"px-5\", \"py-2\", \"rounded-md\", \"shadow-2xl\", \"transition\", \"focus:ease-out\", \"focus:scale-110\", \"duration-300\", \"shadow-orange-700\", \"text-black\"], [\"type\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\", 1, \"bg-orange-100\", \"px-5\", \"py-2\", \"rounded-md\", \"shadow-2xl\", \"transition\", \"focus:ease-out\", \"focus:scale-110\", \"duration-300\", \"shadow-orange-700\", \"text-black\"], [\"type\", \"password\", \"placeholder\", \"confirmedPassword Password\", \"formControlName\", \"confirmedPassword\", 1, \"bg-orange-100\", \"px-5\", \"py-2\", \"rounded-md\", \"shadow-2xl\", \"transition\", \"focus:ease-out\", \"focus:scale-110\", \"duration-300\", \"shadow-orange-700\", \"text-black\"], [\"type\", \"submit\", 1, \"bg-yellow-950\", \"px-5\", \"py-2\", \"text-white\", \"rounded-md\", \"shadow-xl\", \"transition\", \"hover:ease-out\", \"hover:scale-110\", \"duration-300\"], [\"routerLink\", \"/login\", 1, \"text-white\", \"underline\", \"underline-offset-4\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(2, \"h1\", 2);\n      i0.ɵɵtext(3, \"REGISTER...\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"label\", 3);\n      i0.ɵɵtext(5, \" Username: \");\n      i0.ɵɵelement(6, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"label\", 3);\n      i0.ɵɵtext(8, \" Password: \");\n      i0.ɵɵelement(9, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\", 3);\n      i0.ɵɵtext(11, \" Confirm Password: \");\n      i0.ɵɵelement(12, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵtext(14, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"a\", 8);\n      i0.ɵɵtext(16, \"Already have an account?\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n    }\n  },\n  dependencies: [i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { RegisterComponent };","map":{"version":3,"names":["Validators","RegisterComponent","constructor","fb","authService","router","toastr","ngOnInit","registerForm","group","username","required","password","confirmedPassword","submitForm","console","log","value","errors","invalid","payload","controls","register","subscribe","next","navigate","error","message","errMsg","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthServiceService","i3","Router","i4","ToastrService","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_1_listener","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["/Users/pawellaciak/revature-p1/Pawel-p1-frontend/src/app/pages/register/register.component.ts","/Users/pawellaciak/revature-p1/Pawel-p1-frontend/src/app/pages/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport{ FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { RegisterPayload } from 'src/app/models/register-payload';\nimport { AuthServiceService } from 'src/app/services/auth-service.service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm!: FormGroup;\n  constructor(private fb: FormBuilder, private authService: AuthServiceService,  private router: Router,private toastr:ToastrService ) {}\n\n    \n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmedPassword: ['', Validators.required],\n  })\n  }\n\n  submitForm(): void {\n\n      // Log form values\n  \n  console.log(this.registerForm.value);\n\n  // Log form errors\n  console.log(this.registerForm.errors);\n    if(this.registerForm && this.registerForm.invalid){\n      console.log('This form is invalid');\n      //this.registerForm.reset();\n      return;\n    }\n\n    const payload: RegisterPayload = {\n      username: this.registerForm.controls['username'].value,\n      password: this.registerForm.controls['password'].value,\n      confirmedPassword: this.registerForm.controls['confirmedPassword'].value,\n      };\n    console.log(\"Username Entered: \", payload.username);\n      console.log(\"Password Entered: \", payload.password);\n      console.log(\"Confirmed Password Entered: \", payload.confirmedPassword);\n    // //service sends payload to backend \n\n    this.authService.register(payload).subscribe( {\n      next: value => {\n         this.router.navigate(['/login']);\n         \n    },\n      \n      error: error => {console.log(error.error.message);\n        let errMsg = error.error?.message || 'Unknown error occurred';\n    this.toastr.error(errMsg, 'Error');\n        this.toastr.error(error.error.message, 'Error');\n        \n\n  } \n    \n    }); \n  }\n\n}\n\n","<div class=\"flex flex-col items-center\">\n    <form [formGroup] = \"registerForm\" (ngSubmit)=\"submitForm()\" class=\"flex flex-col items-center gap-10 my-40 shadow-xl p-20 rounded-md bg-gradient-to-tr from-yellow-900 to-yellow-200 text-white\">\n\n        <h1 class=\"font-bold text-4xl\">REGISTER...</h1>\n    \n        <label class=\"flex flex-col\">\n            Username:\n            <input class=\"bg-orange-100 px-5 py-2 rounded-md shadow-2xl transition focus:ease-out focus:scale-110 duration-300 shadow-orange-700 text-black\" type=\"username\" placeholder=\"text\" formControlName=\"username\"/>\n        </label>\n    \n        <label class= \"flex flex-col\">\n            Password:\n            <input class=\"bg-orange-100 px-5 py-2 rounded-md shadow-2xl transition focus:ease-out focus:scale-110 duration-300 shadow-orange-700 text-black\" type=\"password\" placeholder=\"Password\" formControlName=\"password\"/>\n    \n        </label>\n        <label class= \"flex flex-col\">\n            Confirm Password:\n            <input class=\"bg-orange-100 px-5 py-2 rounded-md shadow-2xl transition focus:ease-out focus:scale-110 duration-300 shadow-orange-700 text-black\" type=\"password\" placeholder=\"confirmedPassword Password\" formControlName=\"confirmedPassword\"/>\n    \n        </label>\n    \n        <button type=\"submit\" class =\"bg-yellow-950 px-5 py-2 text-white rounded-md shadow-xl transition hover:ease-out hover:scale-110 duration-300\">Register</button>\n    \n        <a class=\"text-white underline underline-offset-4\" routerLink=\"/login\">Already have an account?</a>\n    \n    </form>\n    \n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}