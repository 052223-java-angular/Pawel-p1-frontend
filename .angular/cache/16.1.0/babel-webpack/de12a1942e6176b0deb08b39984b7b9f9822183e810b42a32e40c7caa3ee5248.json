{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, authService, router, toastr, ngZone, NgZone) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n    this.ngZone = ngZone;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmedPassword: ['', Validators.required]\n    });\n  }\n  submitForm() {\n    // Log form values\n    console.log(this.registerForm.value);\n    // Log form errors\n    console.log(this.registerForm.errors);\n    if (this.registerForm && this.registerForm.invalid) {\n      console.log('This form is invalid');\n      this.registerForm.reset();\n      return;\n    }\n    const payload = {\n      username: this.registerForm.controls['username'].value,\n      password: this.registerForm.controls['password'].value,\n      confirmedPassword: this.registerForm.controls['confirmedPassword'].value\n    };\n    console.log(\"Username Entered: \", payload.username);\n    console.log(\"Password Entered: \", payload.password);\n    console.log(\"Confirmed Password Entered: \", payload.confirmedPassword);\n    // //service sends payload to backend \n    this.authService.register(payload).subscribe({\n      next: value => {\n        this.router.navigate(['/login']);\n      },\n      error: error => {\n        console.log(error.error.message);\n        this.toastr.error(error.error.message, 'Error');\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","authService","router","toastr","ngZone","NgZone","ngOnInit","registerForm","group","username","required","password","confirmedPassword","submitForm","console","log","value","errors","invalid","reset","payload","controls","register","subscribe","next","navigate","error","message","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/pawellaciak/revature-p1/Pawel-p1-frontend/src/app/pages/register/register.component.ts"],"sourcesContent":["import { Component, OnInit, NgZone } from '@angular/core';\nimport{ FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { RegisterPayload } from 'src/app/models/register-payload';\nimport { AuthServiceService } from 'src/app/services/auth-service.service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm!: FormGroup;\n  constructor(private fb: FormBuilder, private authService: AuthServiceService,  private router: Router,private toastr:ToastrService, private ngZone NgZone ) {}\n\n    \n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmedPassword: ['', Validators.required],\n  });\n  }\n\n  submitForm(): void {\n\n      // Log form values\n  \n  console.log(this.registerForm.value);\n\n  // Log form errors\n  console.log(this.registerForm.errors);\n    if(this.registerForm && this.registerForm.invalid){\n      console.log('This form is invalid');\n      this.registerForm.reset();\n      return;\n    }\n\n    const payload: RegisterPayload = {\n      username: this.registerForm.controls['username'].value,\n      password: this.registerForm.controls['password'].value,\n      confirmedPassword: this.registerForm.controls['confirmedPassword'].value,\n      };\n    console.log(\"Username Entered: \", payload.username);\n      console.log(\"Password Entered: \", payload.password);\n      console.log(\"Confirmed Password Entered: \", payload.confirmedPassword);\n    // //service sends payload to backend \n\n    this.authService.register(payload).subscribe( {\n      next: value => {\n         this.router.navigate(['/login']);\n         \n    },\n      \n      error: error => {console.log(error.error.message);\n        \n        this.toastr.error(error.error.message, 'Error');\n        \n\n  } \n    \n    }); \n  }\n\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAwB,eAAe;AACzD,SAAgCC,UAAU,QAAO,gBAAgB;AAWjE,IAAaC,iBAAiB,GAA9B,MAAaA,iBAAiB;EAG5BC,YAAoBC,EAAe,EAAUC,WAA+B,EAAWC,MAAc,EAASC,MAAoB,EAAUC,MAAM,EAACC,MAAM;IAArI,KAAAL,EAAE,GAAFA,EAAE;IAAuB,KAAAC,WAAW,GAAXA,WAAW;IAA+B,KAAAC,MAAM,GAANA,MAAM;IAAiB,KAAAC,MAAM,GAANA,MAAM;IAAwB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAI7JE,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACa,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACa,QAAQ,CAAC;MACnCE,iBAAiB,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACa,QAAQ;KAC9C,CAAC;EACF;EAEAG,UAAUA,CAAA;IAEN;IAEJC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,YAAY,CAACS,KAAK,CAAC;IAEpC;IACAF,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,YAAY,CAACU,MAAM,CAAC;IACnC,IAAG,IAAI,CAACV,YAAY,IAAI,IAAI,CAACA,YAAY,CAACW,OAAO,EAAC;MAChDJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,IAAI,CAACR,YAAY,CAACY,KAAK,EAAE;MACzB;;IAGF,MAAMC,OAAO,GAAoB;MAC/BX,QAAQ,EAAE,IAAI,CAACF,YAAY,CAACc,QAAQ,CAAC,UAAU,CAAC,CAACL,KAAK;MACtDL,QAAQ,EAAE,IAAI,CAACJ,YAAY,CAACc,QAAQ,CAAC,UAAU,CAAC,CAACL,KAAK;MACtDJ,iBAAiB,EAAE,IAAI,CAACL,YAAY,CAACc,QAAQ,CAAC,mBAAmB,CAAC,CAACL;KAClE;IACHF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,OAAO,CAACX,QAAQ,CAAC;IACjDK,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,OAAO,CAACT,QAAQ,CAAC;IACnDG,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEK,OAAO,CAACR,iBAAiB,CAAC;IACxE;IAEA,IAAI,CAACX,WAAW,CAACqB,QAAQ,CAACF,OAAO,CAAC,CAACG,SAAS,CAAE;MAC5CC,IAAI,EAAER,KAAK,IAAG;QACX,IAAI,CAACd,MAAM,CAACuB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAErC,CAAC;MAECC,KAAK,EAAEA,KAAK,IAAG;QAAEZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;QAE/C,IAAI,CAACxB,MAAM,CAACuB,KAAK,CAACA,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,OAAO,CAAC;MAGrD;KAEG,CAAC;EACJ;CAED;AAvDY7B,iBAAiB,GAAA8B,UAAA,EAL7BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWjC,iBAAiB,CAuD7B;SAvDYA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}