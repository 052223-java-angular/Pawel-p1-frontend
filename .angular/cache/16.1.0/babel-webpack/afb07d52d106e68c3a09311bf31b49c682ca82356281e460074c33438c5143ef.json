{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, authService, router, toastr) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n    this.validUsername = true;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required, Validators.pattern(\"^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$\")],\n      password: ['', Validators.required],\n      confirmedPassword: ['', Validators.required]\n    });\n  }\n  submitForm() {\n    if (this.registerForm && this.registerForm.invalid) {\n      this.registerForm.controls['username'].markAsTouched();\n      this.registerForm.controls['password'].markAsTouched();\n      this.registerForm.controls['confirmedPassword'].markAsTouched();\n      this.registerForm.reset();\n      return;\n    }\n    //this.registerForm.reset();\n    const payload = {\n      username: this.registerForm.controls['username'].value,\n      password: this.registerForm.controls['password'].value,\n      confirmedPassword: this.registerForm.controls['confirmedPassword'].value\n    };\n    console.log(\"Username Entered: \", payload.username);\n    console.log(\"Password Entered: \", payload.password);\n    console.log(\"Confirmed Password Entered: \", payload.confirmedPassword);\n    // //service sends payload to backend \n    this.authService.register(payload).subscribe({\n      next: value => {\n        this.toastr.success('Reigstration Successful');\n        this.router.navigate(['/login']);\n      },\n      error: error => {\n        console.log(error.error.message);\n        this.toastr.error('Error');\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","authService","router","toastr","validUsername","ngOnInit","registerForm","group","username","required","pattern","password","confirmedPassword","submitForm","invalid","controls","markAsTouched","reset","payload","value","console","log","register","subscribe","next","success","navigate","error","message","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/pawellaciak/revature-p1/Pawel-p1-frontend/src/app/pages/register/register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport{ FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { RegisterPayload } from 'src/app/models/register-payload';\nimport { AuthServiceService } from 'src/app/services/auth-service.service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm!: FormGroup;\n  validUsername: boolean = true;\n  constructor(private fb: FormBuilder, private authService: AuthServiceService,  private router: Router,private toastr:ToastrService ) {}\n\n    \n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required, Validators.pattern(\"^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$\")],\n      password: ['', Validators.required],\n      confirmedPassword: ['', Validators.required],\n  });\n  }\n\n  submitForm(): void {\n\n    if(this.registerForm && this.registerForm.invalid){\n      \n\n      this.registerForm.controls['username'].markAsTouched();\n      this.registerForm.controls['password'].markAsTouched();\n      this.registerForm.controls['confirmedPassword'].markAsTouched();\n      this.registerForm.reset();\n      return;\n    }\n\n    //this.registerForm.reset();\n\n    const payload: RegisterPayload = {\n      username: this.registerForm.controls['username'].value,\n      password: this.registerForm.controls['password'].value,\n      confirmedPassword: this.registerForm.controls['confirmedPassword'].value,\n      };\n    console.log(\"Username Entered: \", payload.username);\n      console.log(\"Password Entered: \", payload.password);\n      console.log(\"Confirmed Password Entered: \", payload.confirmedPassword);\n    // //service sends payload to backend \n\n    this.authService.register(payload).subscribe( {\n      next: value => {\n         this.toastr.success('Reigstration Successful');\n         this.router.navigate(['/login']);\n         \n    },\n      \n      error: error => {console.log(error.error.message);\n        \n        this.toastr.error('Error');\n        \n\n  } \n    \n    }); \n  }\n\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAgCC,UAAU,QAAO,gBAAgB;AAWjE,IAAaC,iBAAiB,GAA9B,MAAaA,iBAAiB;EAI5BC,YAAoBC,EAAe,EAAUC,WAA+B,EAAWC,MAAc,EAASC,MAAoB;IAA9G,KAAAH,EAAE,GAAFA,EAAE;IAAuB,KAAAC,WAAW,GAAXA,WAAW;IAA+B,KAAAC,MAAM,GAANA,MAAM;IAAiB,KAAAC,MAAM,GAANA,MAAM;IADpH,KAAAC,aAAa,GAAY,IAAI;EACyG;EAItIC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,OAAO,CAAC,qDAAqD,CAAC,CAAC;MAC9GC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACY,QAAQ,CAAC;MACnCG,iBAAiB,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACY,QAAQ;KAC9C,CAAC;EACF;EAEAI,UAAUA,CAAA;IAER,IAAG,IAAI,CAACP,YAAY,IAAI,IAAI,CAACA,YAAY,CAACQ,OAAO,EAAC;MAGhD,IAAI,CAACR,YAAY,CAACS,QAAQ,CAAC,UAAU,CAAC,CAACC,aAAa,EAAE;MACtD,IAAI,CAACV,YAAY,CAACS,QAAQ,CAAC,UAAU,CAAC,CAACC,aAAa,EAAE;MACtD,IAAI,CAACV,YAAY,CAACS,QAAQ,CAAC,mBAAmB,CAAC,CAACC,aAAa,EAAE;MAC/D,IAAI,CAACV,YAAY,CAACW,KAAK,EAAE;MACzB;;IAGF;IAEA,MAAMC,OAAO,GAAoB;MAC/BV,QAAQ,EAAE,IAAI,CAACF,YAAY,CAACS,QAAQ,CAAC,UAAU,CAAC,CAACI,KAAK;MACtDR,QAAQ,EAAE,IAAI,CAACL,YAAY,CAACS,QAAQ,CAAC,UAAU,CAAC,CAACI,KAAK;MACtDP,iBAAiB,EAAE,IAAI,CAACN,YAAY,CAACS,QAAQ,CAAC,mBAAmB,CAAC,CAACI;KAClE;IACHC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,OAAO,CAACV,QAAQ,CAAC;IACjDY,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,OAAO,CAACP,QAAQ,CAAC;IACnDS,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,OAAO,CAACN,iBAAiB,CAAC;IACxE;IAEA,IAAI,CAACX,WAAW,CAACqB,QAAQ,CAACJ,OAAO,CAAC,CAACK,SAAS,CAAE;MAC5CC,IAAI,EAAEL,KAAK,IAAG;QACX,IAAI,CAAChB,MAAM,CAACsB,OAAO,CAAC,yBAAyB,CAAC;QAC9C,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAErC,CAAC;MAECC,KAAK,EAAEA,KAAK,IAAG;QAAEP,OAAO,CAACC,GAAG,CAACM,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;QAE/C,IAAI,CAACzB,MAAM,CAACwB,KAAK,CAAC,OAAO,CAAC;MAGhC;KAEG,CAAC;EACJ;CAED;AAzDY7B,iBAAiB,GAAA+B,UAAA,EAL7BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWlC,iBAAiB,CAyD7B;SAzDYA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}