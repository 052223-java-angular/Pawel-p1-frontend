{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, authService, router, toastr) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmedPassword: ['', Validators.required]\n    });\n  }\n  submitForm() {\n    if (this.registerForm && this.registerForm.invalid) {\n      this.registerForm.controls['username'].markAsTouched();\n      this.registerForm.controls['password'].markAsTouched();\n      this.registerForm.controls['confirmedPassword'].markAsTouched();\n      console.log('This form is invalid');\n      this.registerForm.reset();\n      return;\n    }\n    const payload = {\n      username: this.registerForm.controls['username'].value,\n      password: this.registerForm.controls['password'].value,\n      confirmedPassword: this.registerForm.controls['confirmedPassword'].value\n    };\n    console.log(\"Username Entered: \", payload.username);\n    console.log(\"Password Entered: \", payload.password);\n    console.log(\"Confirmed Password Entered: \", payload.confirmedPassword);\n    // //service sends payload to backend \n    this.authService.register(payload).subscribe({\n      next: value => {\n        this.router.navigate(['/login']);\n      },\n      error: error => {\n        console.log(error.error.message);\n        this.toastr.error('Error');\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","authService","router","toastr","ngOnInit","registerForm","group","username","required","password","confirmedPassword","submitForm","invalid","controls","markAsTouched","console","log","reset","payload","value","register","subscribe","next","navigate","error","message","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/pawellaciak/revature-p1/Pawel-p1-frontend/src/app/pages/register/register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport{ FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { RegisterPayload } from 'src/app/models/register-payload';\nimport { AuthServiceService } from 'src/app/services/auth-service.service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm!: FormGroup;\n  constructor(private fb: FormBuilder, private authService: AuthServiceService,  private router: Router,private toastr:ToastrService ) {}\n\n    \n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmedPassword: ['', Validators.required],\n  });\n  }\n\n  submitForm(): void {\n\n    if(this.registerForm && this.registerForm.invalid){\n      this.registerForm.controls['username'].markAsTouched();\n      this.registerForm.controls['password'].markAsTouched();\n      this.registerForm.controls['confirmedPassword'].markAsTouched();\n      console.log('This form is invalid');\n      this.registerForm.reset();\n      return;\n    }\n\n    const payload: RegisterPayload = {\n      username: this.registerForm.controls['username'].value,\n      password: this.registerForm.controls['password'].value,\n      confirmedPassword: this.registerForm.controls['confirmedPassword'].value,\n      };\n    console.log(\"Username Entered: \", payload.username);\n      console.log(\"Password Entered: \", payload.password);\n      console.log(\"Confirmed Password Entered: \", payload.confirmedPassword);\n    // //service sends payload to backend \n\n    this.authService.register(payload).subscribe( {\n      next: value => {\n         this.router.navigate(['/login']);\n         \n    },\n      \n      error: error => {console.log(error.error.message);\n        \n        this.toastr.error('Error');\n        \n\n  } \n    \n    }); \n  }\n\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAgCC,UAAU,QAAO,gBAAgB;AAWjE,IAAaC,iBAAiB,GAA9B,MAAaA,iBAAiB;EAG5BC,YAAoBC,EAAe,EAAUC,WAA+B,EAAWC,MAAc,EAASC,MAAoB;IAA9G,KAAAH,EAAE,GAAFA,EAAE;IAAuB,KAAAC,WAAW,GAAXA,WAAW;IAA+B,KAAAC,MAAM,GAANA,MAAM;IAAiB,KAAAC,MAAM,GAANA,MAAM;EAAkB;EAItIC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ,CAAC;MACnCE,iBAAiB,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACW,QAAQ;KAC9C,CAAC;EACF;EAEAG,UAAUA,CAAA;IAER,IAAG,IAAI,CAACN,YAAY,IAAI,IAAI,CAACA,YAAY,CAACO,OAAO,EAAC;MAChD,IAAI,CAACP,YAAY,CAACQ,QAAQ,CAAC,UAAU,CAAC,CAACC,aAAa,EAAE;MACtD,IAAI,CAACT,YAAY,CAACQ,QAAQ,CAAC,UAAU,CAAC,CAACC,aAAa,EAAE;MACtD,IAAI,CAACT,YAAY,CAACQ,QAAQ,CAAC,mBAAmB,CAAC,CAACC,aAAa,EAAE;MAC/DC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,IAAI,CAACX,YAAY,CAACY,KAAK,EAAE;MACzB;;IAGF,MAAMC,OAAO,GAAoB;MAC/BX,QAAQ,EAAE,IAAI,CAACF,YAAY,CAACQ,QAAQ,CAAC,UAAU,CAAC,CAACM,KAAK;MACtDV,QAAQ,EAAE,IAAI,CAACJ,YAAY,CAACQ,QAAQ,CAAC,UAAU,CAAC,CAACM,KAAK;MACtDT,iBAAiB,EAAE,IAAI,CAACL,YAAY,CAACQ,QAAQ,CAAC,mBAAmB,CAAC,CAACM;KAClE;IACHJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,OAAO,CAACX,QAAQ,CAAC;IACjDQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,OAAO,CAACT,QAAQ,CAAC;IACnDM,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,OAAO,CAACR,iBAAiB,CAAC;IACxE;IAEA,IAAI,CAACT,WAAW,CAACmB,QAAQ,CAACF,OAAO,CAAC,CAACG,SAAS,CAAE;MAC5CC,IAAI,EAAEH,KAAK,IAAG;QACX,IAAI,CAACjB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAErC,CAAC;MAECC,KAAK,EAAEA,KAAK,IAAG;QAAET,OAAO,CAACC,GAAG,CAACQ,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;QAE/C,IAAI,CAACtB,MAAM,CAACqB,KAAK,CAAC,OAAO,CAAC;MAGhC;KAEG,CAAC;EACJ;CAED;AApDY1B,iBAAiB,GAAA4B,UAAA,EAL7B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACW/B,iBAAiB,CAoD7B;SApDYA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}