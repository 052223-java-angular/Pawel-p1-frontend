{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(fb, authService, router, toastr) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n    this.validUsername = true;\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  submitForm() {\n    if (this.loginForm && this.loginForm.invalid) {\n      if (!this.loginForm.controls['username'].value.test(\"^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$\")) {\n        this.validUsername = false;\n      }\n      this.loginForm.controls['username'].markAsTouched();\n      this.loginForm.controls['password'].markAsTouched();\n      this.loginForm.reset();\n      return;\n    }\n    //this.loginForm.reset();\n    const payload = {\n      username: this.loginForm.controls['username'].value,\n      password: this.loginForm.controls['password'].value\n    };\n    console.log(\"Username Entered: \", payload.username);\n    console.log(\"Password Entered: \", payload.password);\n    // //service sends payload to backend \n    this.authService.login(payload).subscribe({\n      next: value => {\n        this.toastr.success('Login Successful');\n        this.router.navigate(['/reviews']);\n      },\n      error: error => {\n        console.log(error.error.message);\n        this.toastr.error('Error');\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","fb","authService","router","toastr","validUsername","ngOnInit","loginForm","group","username","required","password","submitForm","invalid","controls","value","test","markAsTouched","reset","payload","console","log","login","subscribe","next","success","navigate","error","message","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/pawellaciak/revature-p1/Pawel-p1-frontend/src/app/pages/login/login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Form, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthServiceService } from 'src/app/services/auth-service.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { LoginPayload } from 'src/app/models/login-payload';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n  validUsername: boolean = true;\n  \n  constructor(private fb: FormBuilder, \n    private authService: AuthServiceService,  \n    private router: Router, \n    private toastr:ToastrService ) {}\n\n    \n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      \n  });\n  }\n\n  submitForm(): void {\n\n    if(this.loginForm && this.loginForm.invalid){\n      \n      if(!this.loginForm.controls['username'].value.test(\"^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$\")){\n        this.validUsername = false;\n      }\n      \n\n\n      this.loginForm.controls['username'].markAsTouched();\n      this.loginForm.controls['password'].markAsTouched();\n      this.loginForm.reset();\n      return;\n    }\n\n    //this.loginForm.reset();\n\n    const payload: LoginPayload = {\n      username: this.loginForm.controls['username'].value,\n      password: this.loginForm.controls['password'].value,\n      };\n    console.log(\"Username Entered: \", payload.username);\n      console.log(\"Password Entered: \", payload.password);\n    // //service sends payload to backend \n\n    this.authService.login(payload).subscribe( {\n      next: value => {\n         this.toastr.success('Login Successful');\n         this.router.navigate(['/reviews']);\n         \n    },\n      \n      error: error => {console.log(error.error.message);\n        \n        this.toastr.error('Error');\n        \n\n  } \n    \n    }); \n  }\n\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAuCC,UAAU,QAAQ,gBAAgB;AAYzE,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAIzBC,YAAoBC,EAAe,EACzBC,WAA+B,EAC/BC,MAAc,EACdC,MAAoB;IAHV,KAAAH,EAAE,GAAFA,EAAE;IACZ,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,MAAM,GAANA,MAAM;IALhB,KAAAC,aAAa,GAAY,IAAI;EAKK;EAIlCC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ;KAErC,CAAC;EACF;EAEAE,UAAUA,CAAA;IAER,IAAG,IAAI,CAACL,SAAS,IAAI,IAAI,CAACA,SAAS,CAACM,OAAO,EAAC;MAE1C,IAAG,CAAC,IAAI,CAACN,SAAS,CAACO,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,CAACC,IAAI,CAAC,qDAAqD,CAAC,EAAC;QACxG,IAAI,CAACX,aAAa,GAAG,KAAK;;MAK5B,IAAI,CAACE,SAAS,CAACO,QAAQ,CAAC,UAAU,CAAC,CAACG,aAAa,EAAE;MACnD,IAAI,CAACV,SAAS,CAACO,QAAQ,CAAC,UAAU,CAAC,CAACG,aAAa,EAAE;MACnD,IAAI,CAACV,SAAS,CAACW,KAAK,EAAE;MACtB;;IAGF;IAEA,MAAMC,OAAO,GAAiB;MAC5BV,QAAQ,EAAE,IAAI,CAACF,SAAS,CAACO,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK;MACnDJ,QAAQ,EAAE,IAAI,CAACJ,SAAS,CAACO,QAAQ,CAAC,UAAU,CAAC,CAACC;KAC7C;IACHK,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,OAAO,CAACV,QAAQ,CAAC;IACjDW,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,OAAO,CAACR,QAAQ,CAAC;IACrD;IAEA,IAAI,CAACT,WAAW,CAACoB,KAAK,CAACH,OAAO,CAAC,CAACI,SAAS,CAAE;MACzCC,IAAI,EAAET,KAAK,IAAG;QACX,IAAI,CAACX,MAAM,CAACqB,OAAO,CAAC,kBAAkB,CAAC;QACvC,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;MAEvC,CAAC;MAECC,KAAK,EAAEA,KAAK,IAAG;QAAEP,OAAO,CAACC,GAAG,CAACM,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;QAE/C,IAAI,CAACxB,MAAM,CAACuB,KAAK,CAAC,OAAO,CAAC;MAGhC;KAEG,CAAC;EACJ;CAED;AA9DY5B,cAAc,GAAA8B,UAAA,EAL1BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWjC,cAAc,CA8D1B;SA9DYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}